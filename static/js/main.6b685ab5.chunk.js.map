{"version":3,"sources":["Ninjas.js","AddNinja.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","ninjas","deleteNinja","ninjaList","map","ninja","age","className","key","id","name","onClick","AddNinja","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addNinja","onSubmit","this","htmlFor","type","onChange","Component","App","Math","random","filter","console","log","prevProps","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAwBeA,EAtBA,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAChBC,EAAYF,EAAOG,KAAI,SAAAC,GACzB,OAAIA,EAAMC,IAAM,GAER,yBAAKC,UAAU,QAAQC,IAAKH,EAAMI,IAC9B,yBAAKF,UAAU,QAAf,QAA4BF,EAAMK,MAClC,yBAAKH,UAAU,OAAf,OAA0BF,EAAMC,KAChC,4BAAQK,QAAS,WAAQT,EAAYG,EAAMI,MAA3C,iBAID,QAIf,OACI,yBAAKF,UAAU,cACVJ,I,kdCaES,E,kMA7BXC,MAAQ,CACJH,KAAM,KACNJ,IAAK,M,EAETQ,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOR,GAAKM,EAAEE,OAAOC,S,EAGhCC,aAAe,SAACJ,GACZA,EAAEK,iBAEF,EAAKC,MAAMC,SAAS,EAAKT,Q,4CAE7B,WACI,OACI,6BACI,0BAAMU,SAAUC,KAAKL,cACjB,2BAAOM,QAAQ,QAAf,SACA,2BAAOC,KAAK,OAAOjB,GAAG,OAAOkB,SAAUH,KAAKV,eAC5C,2BAAOW,QAAQ,OAAf,QACA,2BAAOC,KAAK,OAAOjB,GAAG,MAAMkB,SAAUH,KAAKV,eAC3C,gD,GAvBGc,a,2cC8CRC,E,kMA3CbhB,MAAQ,CACNZ,OAAQ,CACN,CAAES,KAAM,QAASJ,IAAK,KAAMG,GAAI,GAChC,CAAEC,KAAM,QAASJ,IAAK,KAAMG,GAAI,GAChC,CAAEC,KAAM,QAASJ,IAAK,KAAMG,GAAI,K,EAIpCa,SAAW,SAACjB,GACVA,EAAMI,GAAKqB,KAAKC,SAChB,IAAI9B,EAAM,sBAAO,EAAKY,MAAMZ,QAAlB,CAA0BI,IACpC,EAAKW,SAAS,CACZf,OAAQA,K,EAIZC,YAAc,SAACO,GACb,IAAIR,EAAS,EAAKY,MAAMZ,OAAO+B,QAAO,SAAA3B,GACpC,OAAOA,EAAMI,KAAOA,KAEtB,EAAKO,SAAS,CACZf,OAAQA,K,uDAIZ,WACEgC,QAAQC,IAAI,e,gCAEd,SAAmBC,EAAWC,GAC5BH,QAAQC,IAAI,eACZD,QAAQC,IAAIC,EAAWC,K,oBAGzB,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,CAAQL,YAAasB,KAAKtB,YAAaD,OAAQuB,KAAKX,MAAMZ,SAC1D,kBAAC,EAAD,CAAUqB,SAAUE,KAAKF,gB,GAtCfM,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6b685ab5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Ninjas = ({ ninjas, deleteNinja }) => {\r\n    const ninjaList = ninjas.map(ninja => {\r\n        if (ninja.age > 20) {\r\n            return (\r\n                <div className=\"ninja\" key={ninja.id}>\r\n                    <div className=\"name\">Name {ninja.name}</div>\r\n                    <div className=\"age\">Age {ninja.age}</div>\r\n                    <button onClick={() => { deleteNinja(ninja.id) }}>Delete Ninja</button>\r\n                </div>\r\n            )\r\n        } else {\r\n            return null\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className=\"ninja-List\" >\r\n            {ninjaList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Ninjas;","import React, { Component } from 'react';\r\n\r\nclass AddNinja extends Component {\r\n    state = {\r\n        name: null,\r\n        age: null\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        });\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state)\r\n        this.props.addNinja(this.state);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"name\">Name </label>\r\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange} />\r\n                    <label htmlFor=\"age\">Age </label>\r\n                    <input type=\"text\" id=\"age\" onChange={this.handleChange} />\r\n                    <button>Submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNinja;","import React, { Component } from 'react';\nimport Ninjas from './Ninjas';\nimport AddNinja from './AddNinja'\n\nclass App extends Component {\n  state = {\n    ninjas: [\n      { name: 'Rinku', age: '28', id: 1 },\n      { name: 'Tinku', age: '35', id: 2 },\n      { name: 'Pinku', age: '21', id: 3 }\n    ]\n  }\n\n  addNinja = (ninja) => {\n    ninja.id = Math.random();\n    let ninjas = [...this.state.ninjas, ninja];\n    this.setState({\n      ninjas: ninjas\n    })\n  }\n\n  deleteNinja = (id) => {\n    let ninjas = this.state.ninjas.filter(ninja => {\n      return ninja.id !== id\n    });\n    this.setState({\n      ninjas: ninjas\n    });\n  }\n\n  componentDidMount() {\n    console.log('Page Load');\n  }\n  componentDidUpdate(prevProps, prevState) {\n    console.log('Page update');\n    console.log(prevProps, prevState);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Ninjas deleteNinja={this.deleteNinja} ninjas={this.state.ninjas} />\n        <AddNinja addNinja={this.addNinja} />\n      </div>\n    );\n  }\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}